import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import toast from 'react-hot-toast';
import * as FiIcons from 'react-icons/fi';
import SafeIcon from '../common/SafeIcon';
import { formatCode } from '../utils/formatters';
import { getSampleCode } from '../utils/samples';

const {
  FiDownload, FiShare2, FiPrinter, FiCopy, FiRefreshCw, FiMinimize2,
  FiCheckCircle, FiCode, FiClipboard, FiUpload, FiTrash2, FiSettings,
  FiColumns, FiEye, FiSave, FiRotateCcw, FiRotateCw
} = FiIcons;

const CodeEditor = ({ selectedFormatter }) => {
  const [inputCode, setInputCode] = useState(() => getSampleCode(selectedFormatter));
  const [outputCode, setOutputCode] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [activeTab, setActiveTab] = useState('beautify');
  const [history, setHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(-1);
  const [showSettings, setShowSettings] = useState(false);
  const [editorSettings, setEditorSettings] = useState({
    indentSize: 2,
    useTabs: false,
    lineWrapping: true,
    bracketStyle: 'collapse',
    preserveNewlines: true,
    theme: 'light'
  });

  const outputRef = useRef(null);
  const fileInputRef = useRef(null);

  useEffect(() => {
    setInputCode(getSampleCode(selectedFormatter));
    setOutputCode('');
    setHistory([]);
    setHistoryIndex(-1);
  }, [selectedFormatter]);

  const addToHistory = (code) => {
    // Limit history to last 50 changes
    const newHistory = [...history.slice(0, historyIndex + 1), code].slice(-50);
    setHistory(newHistory);
    setHistoryIndex(newHistory.length - 1);
  };

  const handleFormat = async (action = 'beautify') => {
    if (!inputCode.trim()) {
      toast.error('Please enter some code to format');
      return;
    }

    setIsProcessing(true);
    setActiveTab(action);
    try {
      const result = await formatCode(inputCode, selectedFormatter, action, editorSettings);
      setOutputCode(result);
      addToHistory(inputCode);
      toast.success(`Code ${action === 'beautify' ? 'formatted' : 'minified'} successfully!`);
    } catch (error) {
      toast.error(`Error: ${error.message}`);
      setOutputCode('');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDownload = () => {
    if (!outputCode) {
      toast.error('No formatted code to download');
      return;
    }

    const blob = new Blob([outputCode], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `formatted-code.${selectedFormatter}`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('File downloaded successfully!');
  };

  const handleShare = async () => {
    if (!outputCode) {
      toast.error('No formatted code to share');
      return;
    }

    try {
      if (navigator.share) {
        await navigator.share({
          title: `Formatted ${selectedFormatter.toUpperCase()} Code`,
          text: outputCode,
        });
      } else {
        // Fallback to clipboard
        await navigator.clipboard.writeText(outputCode);
        toast.success('Code copied to clipboard!');
      }
    } catch (error) {
      // Fallback to clipboard
      handleCopy();
    }
  };

  const handlePrint = () => {
    if (!outputCode) {
      toast.error('No formatted code to print');
      return;
    }

    const printWindow = window.open('', '', 'height=600,width=800');
    printWindow.document.write(`
      <html>
        <head>
          <title>Formatted ${selectedFormatter.toUpperCase()} Code</title>
          <style>
            body { font-family: 'Courier New', monospace; padding: 20px; }
            pre { white-space: pre-wrap; background: #f5f5f5; padding: 15px; border-radius: 5px; }
            .header { margin-bottom: 20px; color: #333; }
          </style>
        </head>
        <body>
          <div class="header">
            <h2>Formatted ${selectedFormatter.toUpperCase()} Code</h2>
            <p>Generated by Byte Beautify</p>
          </div>
          <pre>${outputCode}</pre>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const handleCopy = async () => {
    if (!outputCode) {
      toast.error('No formatted code to copy');
      return;
    }

    try {
      await navigator.clipboard.writeText(outputCode);
      toast.success('Code copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy code');
    }
  };

  const handleUploadFile = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (event) => {
      const content = event.target.result;
      setInputCode(content);
      addToHistory(content);
      toast.success(`File "${file.name}" loaded successfully`);
    };
    reader.onerror = () => toast.error("Failed to read file");
    reader.readAsText(file);
  };

  const handleClear = () => {
    if (inputCode) {
      addToHistory(inputCode);
    }
    setInputCode('');
    setOutputCode('');
    toast.success('Editor cleared');
  };

  const handleUndo = () => {
    if (historyIndex > 0) {
      setHistoryIndex(historyIndex - 1);
      setInputCode(history[historyIndex - 1]);
    } else {
      toast.error('No more undo history');
    }
  };

  const handleRedo = () => {
    if (historyIndex < history.length - 1) {
      setHistoryIndex(historyIndex + 1);
      setInputCode(history[historyIndex + 1]);
    } else {
      toast.error('No more redo history');
    }
  };

  const handleValidate = () => {
    if (!inputCode.trim()) {
      toast.error('Please enter some code to validate');
      return;
    }

    try {
      switch (selectedFormatter) {
        case 'json':
          JSON.parse(inputCode);
          break;
        case 'javascript':
          // Basic JS validation
          new Function(inputCode);
          break;
        case 'css':
          // Basic CSS validation - would use a parser in production
          if (!inputCode.includes('{') || !inputCode.includes('}')) {
            throw new Error('CSS syntax appears to be invalid');
          }
          break;
        default:
          // Basic validation - just check if code is not empty
          break;
      }
      toast.success('Validation successful! Your code is valid.');
    } catch (error) {
      toast.error(`Validation failed: ${error.message}`);
    }
  };

  const handleSaveSettings = () => {
    setShowSettings(false);
    toast.success('Settings saved');
    // If code was already formatted, reformat with new settings
    if (outputCode) {
      handleFormat(activeTab);
    }
  };

  const handleSwap = () => {
    if (!outputCode) {
      toast.error('No formatted output to swap');
      return;
    }
    addToHistory(inputCode);
    setInputCode(outputCode);
    setOutputCode('');
    toast.success('Output moved to input editor');
  };

  // Central action buttons between editors
  const actionButtons = [
    {
      icon: FiRefreshCw,
      label: 'Beautify',
      action: () => handleFormat('beautify'),
      color: 'bg-blue-600 hover:bg-blue-700 text-white'
    },
    {
      icon: FiMinimize2,
      label: 'Minify',
      action: () => handleFormat('minify'),
      color: 'bg-purple-600 hover:bg-purple-700 text-white'
    },
    {
      icon: FiCheckCircle,
      label: 'Validate',
      action: handleValidate,
      color: 'bg-green-600 hover:bg-green-700 text-white'
    },
    {
      icon: FiColumns,
      label: 'Swap',
      action: handleSwap,
      color: 'bg-yellow-600 hover:bg-yellow-700 text-white'
    },
    {
      icon: FiTrash2,
      label: 'Clear',
      action: handleClear,
      color: 'bg-red-600 hover:bg-red-700 text-white'
    }
  ];

  // Utility buttons for each editor
  const inputUtilityButtons = [
    { icon: FiUpload, title: 'Upload File', action: handleUploadFile },
    {
      icon: FiCode,
      title: 'Load Sample',
      action: () => {
        addToHistory(inputCode);
        setInputCode(getSampleCode(selectedFormatter));
      }
    },
    {
      icon: FiClipboard,
      title: 'Paste from Clipboard',
      action: async () => {
        try {
          const text = await navigator.clipboard.readText();
          addToHistory(inputCode);
          setInputCode(text);
        } catch (error) {
          toast.error('Failed to read from clipboard');
        }
      }
    },
    { icon: FiRotateCcw, title: 'Undo', action: handleUndo },
    { icon: FiRotateCw, title: 'Redo', action: handleRedo },
  ];

  const outputUtilityButtons = [
    { icon: FiCopy, title: 'Copy to Clipboard', action: handleCopy },
    { icon: FiDownload, title: 'Download', action: handleDownload },
    { icon: FiShare2, title: 'Share', action: handleShare },
    { icon: FiPrinter, title: 'Print', action: handlePrint },
    { icon: FiSave, title: 'Save as File', action: handleDownload }
  ];

  return (
    <div className="py-8 bg-white" id="formatters">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden"
        >
          {/* Header */}
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 px-4 py-3 flex justify-between items-center">
            <div>
              <h2 className="text-xl font-bold text-white capitalize">
                {selectedFormatter} Formatter
              </h2>
              <p className="text-blue-100 text-sm mt-0.5">
                Format, beautify, and minify your {selectedFormatter.toUpperCase()} code
              </p>
            </div>
            <button
              onClick={() => setShowSettings(!showSettings)}
              className="bg-white/20 hover:bg-white/30 text-white p-1.5 rounded-lg transition-colors"
            >
              <SafeIcon icon={FiSettings} className="text-lg" />
            </button>
          </div>

          {/* Settings Panel */}
          {showSettings && (
            <div className="bg-gray-50 p-3 border-b border-gray-200">
              <div className="flex flex-wrap gap-3 items-center">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Indent Size</label>
                  <select
                    value={editorSettings.indentSize}
                    onChange={(e) => setEditorSettings({ ...editorSettings, indentSize: parseInt(e.target.value) })}
                    className="block w-24 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  >
                    {[2, 4, 8].map(size => (
                      <option key={size} value={size}>{size} spaces</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Use Tabs</label>
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editorSettings.useTabs}
                      onChange={(e) => setEditorSettings({ ...editorSettings, useTabs: e.target.checked })}
                      className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Line Wrapping</label>
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={editorSettings.lineWrapping}
                      onChange={(e) => setEditorSettings({ ...editorSettings, lineWrapping: e.target.checked })}
                      className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Bracket Style</label>
                  <select
                    value={editorSettings.bracketStyle}
                    onChange={(e) => setEditorSettings({ ...editorSettings, bracketStyle: e.target.value })}
                    className="block w-32 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  >
                    <option value="collapse">Collapse</option>
                    <option value="expand">Expand</option>
                    <option value="end-expand">End-Expand</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Theme</label>
                  <select
                    value={editorSettings.theme}
                    onChange={(e) => setEditorSettings({ ...editorSettings, theme: e.target.value })}
                    className="block w-32 rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                  >
                    <option value="light">Light</option>
                    <option value="dark">Dark</option>
                    <option value="monokai">Monokai</option>
                  </select>
                </div>
                <div className="ml-auto">
                  <button
                    onClick={handleSaveSettings}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1.5 rounded-md font-medium text-sm"
                  >
                    Save Settings
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Editor Area */}
          <div className="grid md:grid-cols-7 gap-0">
            {/* Input Editor */}
            <div className="md:col-span-3 border-r border-gray-200">
              <div className="bg-gray-100 px-3 py-2 border-b border-gray-200 flex justify-between items-center">
                <h3 className="font-medium text-gray-700 text-sm">Input Code</h3>
                <div className="flex space-x-1.5">
                  {inputUtilityButtons.map((button) => (
                    <button
                      key={button.title}
                      onClick={button.action}
                      className="text-gray-500 hover:text-blue-600 transition-colors p-1"
                      title={button.title}
                    >
                      <SafeIcon icon={button.icon} className="text-xs" />
                    </button>
                  ))}
                </div>
              </div>
              <div className="p-3">
                <textarea
                  value={inputCode}
                  onChange={(e) => setInputCode(e.target.value)}
                  placeholder={`Paste your ${selectedFormatter.toUpperCase()} code here...`}
                  className={`w-full h-80 p-3 border border-gray-300 rounded-lg font-mono text-sm resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
                    editorSettings.theme === 'dark' ? 'bg-gray-800 text-gray-100' :
                    editorSettings.theme === 'monokai' ? 'bg-gray-900 text-green-400' :
                    'bg-white text-gray-800'
                  }`}
                  spellCheck="false"
                  style={{ tabSize: editorSettings.indentSize }}
                />
              </div>
            </div>

            {/* Center Controls */}
            <div className="md:col-span-1 flex md:flex-col justify-center items-center p-3 bg-gray-50 border-b md:border-b-0 md:border-r border-gray-200">
              {actionButtons.map((button) => (
                <button
                  key={button.label}
                  onClick={button.action}
                  className={`${button.color} px-3 py-1.5 my-1 rounded-lg font-medium text-sm transition-all duration-200 w-full flex items-center justify-center space-x-1`}
                >
                  <SafeIcon
                    icon={button.icon}
                    className={`text-xs ${isProcessing && button.label.toLowerCase() === activeTab ? 'animate-spin' : ''}`}
                  />
                  <span className="hidden md:inline text-xs">{button.label}</span>
                </button>
              ))}
            </div>

            {/* Output Editor */}
            <div className="md:col-span-3">
              <div className="bg-gray-100 px-3 py-2 border-b border-gray-200 flex justify-between items-center">
                <h3 className="font-medium text-gray-700 text-sm">Formatted Output</h3>
                <div className="flex space-x-1.5">
                  {outputUtilityButtons.map((button) => (
                    <button
                      key={button.title}
                      onClick={button.action}
                      className="text-gray-500 hover:text-blue-600 transition-colors p-1"
                      title={button.title}
                    >
                      <SafeIcon icon={button.icon} className="text-xs" />
                    </button>
                  ))}
                </div>
              </div>
              <div className="p-3">
                <textarea
                  ref={outputRef}
                  value={outputCode}
                  readOnly
                  placeholder="Formatted code will appear here..."
                  className={`w-full h-80 p-3 border border-gray-300 rounded-lg font-mono text-sm resize-none ${
                    editorSettings.theme === 'dark' ? 'bg-gray-800 text-gray-100' :
                    editorSettings.theme === 'monokai' ? 'bg-gray-900 text-green-400' :
                    'bg-gray-50 text-gray-800'
                  }`}
                  spellCheck="false"
                  style={{ tabSize: editorSettings.indentSize }}
                />
              </div>
            </div>
          </div>

          {/* Pro Features Banner */}
          <div className="bg-gradient-to-r from-gray-100 to-gray-50 px-4 py-3 border-t border-gray-200 flex justify-between items-center flex-wrap gap-3">
            <div>
              <h3 className="font-medium text-gray-900 text-sm">Pro Features Available</h3>
              <p className="text-gray-600 text-xs">Unlock advanced formatting options and more</p>
            </div>
            <div className="flex items-center space-x-3">
              <div className="hidden md:flex items-center space-x-3 text-xs text-gray-600">
                <span className="flex items-center">
                  <SafeIcon icon={FiEye} className="text-blue-500 mr-1 text-xs" /> Syntax highlighting
                </span>
                <span className="flex items-center">
                  <SafeIcon icon={FiSave} className="text-blue-500 mr-1 text-xs" /> Save templates
                </span>
              </div>
              <button className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-3 py-1.5 rounded-lg text-sm font-medium hover:shadow-md transition-all duration-200">
                Upgrade to Pro
              </button>
            </div>
          </div>
        </motion.div>
      </div>

      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        className="hidden"
        accept={`.${selectedFormatter},text/*`}
      />
    </div>
  );
};

export default CodeEditor;